REGISTER USER
{
  "name": "spookie2",
  "email": "spookie2@gmail.com",
  "phone_number": "+254792136720",
  "user_role": "Agent",
  "password": "spookie"
}

LOGIN USER
{
  "email": "spookie2@gmail.com",
  "password": "spookie"
}


@app.route('/track/<string:tracking_number>', methods=['GET', 'POST'])
def track_parcel(tracking_number):
    parcel = Parcel.query.filter_by(tracking_number=tracking_number).first()
    if parcel is None:
        return jsonify({"message": "Parcel not found"}), 404
    
    tracking_info = Tracking.query.filter_by(parcel_id=parcel.parcel_id).order_by(Tracking.timestamp.desc()).all()
    print(f"tracking_info: {tracking_info}")

    # Simulate GPS location if not available
    if not hasattr(parcel, 'latitude') or not hasattr(parcel, 'longitude') or parcel.latitude is None or parcel.longitude is None:
        parcel.latitude = random.uniform(-90, 90)
        parcel.longitude = random.uniform(-180, 180)
        db.session.commit()

    # Get address from coordinates
    geolocator = Nominatim(user_agent="parcel_tracker")
    location = geolocator.reverse(f"{parcel.latitude}, {parcel.longitude}")
    address = location.address if location else "Unknown location"

    tracking_data = [track.to_dict() for track in tracking_info]
    for track in tracking_data:
        track['gps_location'] = {
            'latitude': parcel.latitude,
            'longitude': parcel.longitude,
            'address': address
        }

    parcel.current_location = address

    response_data = {
        "parcel": {
            "tracking_number": parcel.tracking_number,
            "status": parcel.status,
            "current_location": parcel.current_location,
            "sender_name": parcel.sender.name if parcel.sender else "Unknown",
            "recipient_name": parcel.recipient_name,
            "description": parcel.description,
            "category": parcel.category
        },
        "tracking_history": tracking_data
    }

    print(f"response_data: {response_data}")
    return jsonify(response_data)

    

 python app.py
 
 run both frontend and backend
 honcho start -f Procfile.dev

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import json
import os

# Load contacts from JSON file
def load_contacts(file_path):
    with open(file_path, 'r') as file:
        contacts = json.load(file)
    return contacts

# Compose the message
def compose_message(sender_email, recipient_email, subject, body):
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = recipient_email
    message['Subject'] = subject
    message.attach(MIMEText(body, 'plain'))
    return message

# Send the message
def send_message(smtp_server, smtp_port, sender_email, sender_password, contacts, subject, body):
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        
        for contact in contacts:
            recipient_email = contact['email']
            message = compose_message(sender_email, recipient_email, subject, body)
            server.send_message(message)
            print(f"Message sent to {recipient_email}")
        
        server.quit()
    except Exception as e:
        print(f"Failed to send message: {e}")

if __name__ == "__main__":
    # Configuration
    contacts_file = 'contacts.json'
    smtp_server = 'smtp.gmail.com'  # Replace with your SMTP server
    smtp_port = 587  # Replace with your SMTP server port
    sender_email = 'whitshi215@gmail.com'  # Replace with your email
    sender_password = 'tvrp yvrq mjee qfju'  # Replace with your email password
    subject = 'TEST ONE'
    body = 'This is the first test.'

    # Load contacts and send messages
    contacts = load_contacts(contacts_file)
    send_message(smtp_server, smtp_port, sender_email, sender_password, contacts, subject, body)


// const handleLoginWithFacebook = () => {
  //   const provider = new firebase.auth.FacebookAuthProvider();
  //   firebase
  //     .auth()
  //     .signInWithPopup(provider)
  //     .then((result) => {
  //       const user = result.user;
  //       console.log(user);
  //     })
  //     .catch((error) => {
  //       console.error(error);
  //     });
  // };

  // import firebase from "firebase/app";
  // import "firebase/auth";

  // // Initialize Firebase
  // const firebaseConfig = {
  //   // Your Firebase configuration
  // };
  // firebase.initializeApp(firebaseConfig);

  // // Now you can use firebase
  // const handleLoginWithFacebook = () => {
  //   const provider = new firebase.auth.FacebookAuthProvider();
  //   firebase
  //     .auth()
  //     .signInWithPopup(provider)
  //     .then((result) => {
  //       const user = result.user;
  //       console.log(user);
  //     })
  //     .catch((error) => {
  //       console.error(error);
  //     });
  // };


  @app.route('/schedule_pickup', methods=['POST'])
@jwt_required()
def schedule_pickup():
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)
    
    if user.user_role != 'Business':
        return jsonify({"message": "Only businesses can schedule pickups"}), 403
    
    data = request.get_json()
    
    # Use user's primary region from the database if not provided in the request
    sender_location = data.get('current_location') or user.primary_region
    sender_region = get_region_from_address(sender_location)

    # Create a new parcel
    new_parcel = Parcel(
        sender_id=current_user_id,
        tracking_number=generate_unique_tracking_number(existing_numbers=Parcel.query.with_entities(Parcel.tracking_number).all()),
        recipient_name=data['recipient_name'],
        recipient_address=data['recipient_address'],
        recipient_phone=data['recipient_phone'],
        description=data['description'],
        weight=data['weight'],
        category=data['category'],
        status='Scheduled for Pickup',
        current_location=sender_location,
        sender_email=user.email,
        recipient_email=data['recipient_email']
    )
    db.session.add(new_parcel)
    db.session.flush()  # This will assign an ID to the new_parcel
    
    # Create a new order
    new_order = Order(
        user_id=current_user_id,
        order_number=generate_order_number(),
        parcel_id=new_parcel.parcel_id,
        created_at=datetime.now(),
        updated_at=datetime.now()
    )
    db.session.add(new_order)
    
    # Parse the pickup time
    pickup_time_str = data['pickup_time']
    if pickup_time_str.endswith('Z'):
        pickup_time_str = pickup_time_str[:-1]  # Remove the 'Z'
    pickup_time = datetime.fromisoformat(pickup_time_str).replace(tzinfo=timezone.utc)
    
    # Format pickup time as "2024-08-12 Time: 12:20 PM"
    formatted_pickup_time = pickup_time.strftime('%Y-%m-%d Time: %I:%M %p')

    selected_agent_id = data.get('agent_id')
    if not selected_agent_id:
        return jsonify({"message": "Agent ID must be provided"}), 400

    # Convert selected_agent_id to an integer
    try:
        selected_agent_id = int(selected_agent_id)
    except ValueError:
        return jsonify({"message": "Invalid agent ID format"}), 400

    sender_region = get_region_from_address(new_parcel.current_location)

    if sender_region in ['Other', 'Unknown Region']:
        available_agents = User.query.filter_by(
            user_role='Agent',
            status='Available',
            Request='Approved'
        ).all()
    else:
        available_agents = User.query.filter(
        User.user_role == 'Agent',
        User.status == 'Available',
        User.Request == 'Approved',
        (User.primary_region == sender_region) | (User.operation_areas.like(f'%{sender_region}%'))
    ).all()

    if not available_agents:
        return jsonify({"message": f"No available agents in the region: {sender_region}"}), 400

    # Check if the provided agent_id is among the available agents
    selected_agent = next((agent for agent in available_agents if agent.user_id == selected_agent_id), None)

    if not selected_agent:
        return jsonify({"message": "Provided agent ID is not available in the specified region"}), 400

    new_delivery = Delivery(
        parcel_id=new_parcel.parcel_id,
        agent_id=selected_agent.user_id,
        pickup_time=pickup_time,
        status='Scheduled'
    )
    db.session.add(new_delivery)

    new_tracking = Tracking(
        parcel_id=new_parcel.parcel_id,
        location=new_parcel.current_location,
        status=new_parcel.status
    )
    db.session.add(new_tracking)
    
    # # Update the status of the selected agent to 'Unavailable'
    # agent = User.query.get(selected_agent)
    # if agent:
    #     agent.status = 'Unavailable'
    # else:
    #     return jsonify({"message": "Invalid agent ID provided"}), 400
    

    
    db.session.commit()

    recipient_email = data.get('recipient_email')
    if recipient_email:
        subject = f"Your parcel {new_parcel.tracking_number} is scheduled for pickup on {formatted_pickup_time}"
        body = f"Dear {data.get('recipient_name')},\n\nYour parcel {new_parcel.tracking_number} is scheduled for pickup on {formatted_pickup_time}."
        send_notification(recipient_email, subject, body)
    
    if selected_agent:
        agent_email = selected_agent.email
        subject = f"New parcel {new_parcel.tracking_number} scheduled for pickup"
        body = f"A new parcel {new_parcel.tracking_number} is scheduled for you to pickup on {formatted_pickup_time}.\nPlease log in to your dashboard to accept the pickup.\nLocation: {new_parcel.current_location}"
        send_notification(agent_email, subject, body)


    return jsonify({
        "message": "Pickup scheduled successfully",
        "tracking_number": new_parcel.tracking_number,
        "pickup_time": formatted_pickup_time
    }), 201


    {
    "user_id": 21,
    "primary_region":"Nairobi",
    "operation_areas":"Westlands, Kilimani, Karen",
    "name":Meshack Pangas",
    "email":"kataboipangas@gmail.com",
    "phone_number": "+254793456567",
    "user_role":"Agent",
    "status": "Available",
    "Request": "Pending"
}


<select
                    name="agent_id"
                    value={formData.agent_id}
                    onChange={handleChange}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500"
                    required
                  >
                    <option value="">Select Available Agent</option>
                    {availableAgents.map((agent) => (
                      <option key={agent.id} value={agent.id}>
                        {agent.name} 
                        {/* - Operational Areas:{" "}
                        {agent.operational_areas &&
                        Array.isArray(agent.operational_areas)
                          ? agent.operational_areas.join(", ")
                          : "N/A"} */}
                      </option>
                    ))}
                  </select>



theme:
                  bg-gradient-to-br from-yellow-200 to-yellow-400

/* eslint-disable react/prop-types */
import React, { createContext, useState, useContext, useEffect } from "react";
import { toast } from "react-toastify";
import { server } from "../../config.json";

const TrackingContext = createContext();

export const useTracking = () => {
  return useContext(TrackingContext);
};

export const TrackingProvider = ({ children }) => {
  const [trackingData, setTrackingData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchTrackingData = (trackingNumber, frontendUrl) => {
    setLoading(true);
    fetch(`${server}/track/${trackingNumber}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ frontend_url: frontendUrl }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.message) {
          toast.error(data.message);
          setError(data.message);
        } else {
          setTrackingData(data.tracking_history);
        }
        setLoading(false);
      })
      .catch((err) => {
        toast.error("Failed to fetch tracking data");
        setError(err.message);
        setLoading(false);
      });
  };

  useEffect(() => {
    if (trackingData.length > 0) {
      setError(null);
    }
  }, [trackingData]);

  const contextdata = { trackingData, loading, error, fetchTrackingData };

  return (
    <TrackingContext.Provider value={contextdata}>
      {children}
    </TrackingContext.Provider>
  );
};




Map Marker
{/* {parcelData.latitude && parcelData.longitude && (
              <div>
                <h4 className="text-md font-semibold mb-2">Current Location</h4>
                <p className="mb-3 text-sm">{parcelData.current_location}</p>
                <MapContainer
                  center={[parcelData.latitude, parcelData.longitude]}
                  zoom={13}
                  style={{ height: "300px", width: "100%" }}
                >
                  <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
                  <Marker
                    position={[parcelData.latitude, parcelData.longitude]}
                  >
                    <Popup>Current parcel location</Popup>
                  </Marker>
                  
                </MapContainer>
              </div>
            )} */}